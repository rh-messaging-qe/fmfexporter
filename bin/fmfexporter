#!/usr/bin/python
"""
FMFExporter command line tool that helps exporting test cases defined
based on a generic metadata format into an external ALM tool.
Adapters can be implemented and customized as needed.

Initial version provides just an adapter for Polarion ALM, but it has
been designed generically, to expect more adapters to come.
"""
import logging
import sys

from fmfexporter.args.args_parser import FMFExporterArgParser
from fmfexporter.connectors.jira.fmf_jira import FMFJiraPopulator, FMFJiraPopulator
from fmfexporter.fmf_adapter import FMFAdapter

LOGGER = logging.getLogger(__name__)

# Main flow
if __name__ == '__main__':

    if "--show-scheme" in sys.argv:
        import fmfexporter.metadata
        fmfexporter.metadata.show_scheme()
        sys.exit(0)

    # Parse command line arguments
    argparser = FMFExporterArgParser()
    parsed = argparser.parse_args()

    # Initialize logging
    logging.basicConfig(filename="fmfexporter.log",
                        level=logging.getLevelName(parsed.log_level),
                        format='%(asctime)s [%(levelname)s] (%(pathname)s:%(lineno)s) - %(message)s')

    # Filtering FMF Tree according to common arguments
    adapter: FMFAdapter = argparser.adapter

    # In case one or more test case name filters informed
    tc_list = []
    if parsed.tc:
        tc_names = []
        for tcs in [adapter.get_testcases_matching(tc) for tc in parsed.tc]:
            for tc in tcs:
                if tc.name in tc_names:
                    continue
                tc_names.append(tc.name)
                tc_list.append(tc)
    else:
        # If no specific test case filter provided, catch all
        tc_list = adapter.get_testcases_matching('')

    # If no test cases found, exit
    if not tc_list:
        print("No test cases found")
        sys.exit(0)

    # Submitting filtered test cases
    submitted_tc_list = adapter.submit_testcases(tc_list, parsed.jira_populate_tc)

    # Linking Test Case Work items in jira
    if parsed.jira_config is not None:
        jira_pop = FMFJiraPopulator(parsed.jira_config)
        jira_pop.populate_testcases(submitted_tc_list)
    else:
        LOGGER.warning("Jira configuration not provided")

